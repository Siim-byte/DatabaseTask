// <auto-generated />
using System;
using DatabaseTask.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseTask.Data.Migrations
{
    [DbContext(typeof(DatabaseTaskDbContext))]
    [Migration("20251024122920_contextadded")]
    partial class contextadded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DatabaseTask.Core.Domain.Absense", b =>
                {
                    b.Property<int>("AbsenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AbsenseId"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AbsenseId");

                    b.ToTable("Absenses");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Child", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AbsenseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("QueueRegDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AbsenseId");

                    b.HasIndex("QueueRegDate");

                    b.ToTable("Children");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.ChildGroupHistory", b =>
                {
                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StartDate");

                    b.ToTable("ChildGroupHistories");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitleName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobTitleName");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<int?>("AbsenseId")
                        .HasColumnType("int");

                    b.Property<int>("ChildCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ChildGroupHistoryStartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("QueueRegDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RoomNr")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GroupId");

                    b.HasIndex("AbsenseId");

                    b.HasIndex("ChildGroupHistoryStartDate");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("QueueRegDate");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.JobTitle", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Name");

                    b.ToTable("JobTitles");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Menu", b =>
                {
                    b.Property<string>("Morning")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Dinner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DinnerSnack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lunch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MorningSnack")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Portions")
                        .HasColumnType("int");

                    b.HasKey("Morning");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Queue", b =>
                {
                    b.Property<DateTime>("RegDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RegDate");

                    b.ToTable("Queues");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Child", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Absense", null)
                        .WithMany("Id")
                        .HasForeignKey("AbsenseId");

                    b.HasOne("DatabaseTask.Core.Domain.Queue", null)
                        .WithMany("id")
                        .HasForeignKey("QueueRegDate");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Employee", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.JobTitle", null)
                        .WithMany("Id")
                        .HasForeignKey("JobTitleName");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Group", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Absense", null)
                        .WithMany("GroupId")
                        .HasForeignKey("AbsenseId");

                    b.HasOne("DatabaseTask.Core.Domain.ChildGroupHistory", null)
                        .WithMany("Groupid")
                        .HasForeignKey("ChildGroupHistoryStartDate");

                    b.HasOne("DatabaseTask.Core.Domain.Employee", null)
                        .WithMany("Groupid")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("DatabaseTask.Core.Domain.Queue", null)
                        .WithMany("GroupId")
                        .HasForeignKey("QueueRegDate");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Absense", b =>
                {
                    b.Navigation("GroupId");

                    b.Navigation("Id");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.ChildGroupHistory", b =>
                {
                    b.Navigation("Groupid");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Employee", b =>
                {
                    b.Navigation("Groupid");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.JobTitle", b =>
                {
                    b.Navigation("Id");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Queue", b =>
                {
                    b.Navigation("GroupId");

                    b.Navigation("id");
                });
#pragma warning restore 612, 618
        }
    }
}
