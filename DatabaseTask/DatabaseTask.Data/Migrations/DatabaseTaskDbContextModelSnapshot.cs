// <auto-generated />
using System;
using DatabaseTask.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseTask.Data.Migrations
{
    [DbContext(typeof(DatabaseTaskDbContext))]
    partial class DatabaseTaskDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DatabaseTask.Core.Domain.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentID"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("DepartmentID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Doctor", b =>
                {
                    b.Property<int>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorID"));

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<int?>("MedicineID")
                        .HasColumnType("int");

                    b.Property<int>("PhoneNuber")
                        .HasColumnType("int");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("MedicineID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.MedicalVisit", b =>
                {
                    b.Property<int>("MedicineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineID"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicineID");

                    b.ToTable("MedicalVisits");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Medicine", b =>
                {
                    b.Property<int>("MedicineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicineID"));

                    b.Property<int>("Dose")
                        .HasColumnType("int");

                    b.Property<string>("Ingredient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicineID");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Patient", b =>
                {
                    b.Property<int>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientID"));

                    b.Property<string>("Aadress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdentificationNum")
                        .HasColumnType("int");

                    b.Property<int?>("MedicalVisitMedicineID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("PatientID");

                    b.HasIndex("MedicalVisitMedicineID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("DoctorMedicalVisit", b =>
                {
                    b.Property<int>("DoctorsDoctorID")
                        .HasColumnType("int");

                    b.Property<int>("MedicalVisitsMedicineID")
                        .HasColumnType("int");

                    b.HasKey("DoctorsDoctorID", "MedicalVisitsMedicineID");

                    b.HasIndex("MedicalVisitsMedicineID");

                    b.ToTable("DoctorMedicalVisit");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Doctor", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Department", null)
                        .WithMany("Doctors")
                        .HasForeignKey("DepartmentID");

                    b.HasOne("DatabaseTask.Core.Domain.Medicine", null)
                        .WithMany("Doctors")
                        .HasForeignKey("MedicineID");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Patient", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.MedicalVisit", null)
                        .WithMany("Patients")
                        .HasForeignKey("MedicalVisitMedicineID");
                });

            modelBuilder.Entity("DoctorMedicalVisit", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorsDoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseTask.Core.Domain.MedicalVisit", null)
                        .WithMany()
                        .HasForeignKey("MedicalVisitsMedicineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Department", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.MedicalVisit", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Medicine", b =>
                {
                    b.Navigation("Doctors");
                });
#pragma warning restore 612, 618
        }
    }
}
