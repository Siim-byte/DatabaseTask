// <auto-generated />
using System;
using DatabaseTask.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseTask.Data.Migrations
{
    [DbContext(typeof(DatabaseTaskDbContext))]
    [Migration("20251031123347_m")]
    partial class m
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DatabaseTask.Core.Domain.Department", b =>
                {
                    b.Property<Guid>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("DoctorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HeadDoctor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("DepartmentID");

                    b.HasIndex("DoctorID");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Doctor", b =>
                {
                    b.Property<Guid>("DoctorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicineID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PhoneNuber")
                        .HasColumnType("int");

                    b.Property<string>("Profession")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorID");

                    b.HasIndex("MedicineID");

                    b.ToTable("Doctors");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.MedicalVisit", b =>
                {
                    b.Property<Guid>("MedicineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicineID");

                    b.ToTable("MedicalVisits");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Medicine", b =>
                {
                    b.Property<Guid>("MedicineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Dose")
                        .HasColumnType("int");

                    b.Property<string>("Ingredient")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MedicineID");

                    b.ToTable("Medicines");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Patient", b =>
                {
                    b.Property<Guid>("PatientID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Aadress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdentificationNum")
                        .HasColumnType("int");

                    b.Property<Guid?>("MedicalVisitMedicineID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int");

                    b.HasKey("PatientID");

                    b.HasIndex("MedicalVisitMedicineID");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("DoctorMedicalVisit", b =>
                {
                    b.Property<Guid>("DoctorID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VisitIDMedicineID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DoctorID", "VisitIDMedicineID");

                    b.HasIndex("VisitIDMedicineID");

                    b.ToTable("DoctorMedicalVisit");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Department", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Doctor", null)
                        .WithMany("DepartmentID")
                        .HasForeignKey("DoctorID");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Doctor", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Medicine", null)
                        .WithMany("DoctorID")
                        .HasForeignKey("MedicineID");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Patient", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.MedicalVisit", null)
                        .WithMany("PatientID")
                        .HasForeignKey("MedicalVisitMedicineID");
                });

            modelBuilder.Entity("DoctorMedicalVisit", b =>
                {
                    b.HasOne("DatabaseTask.Core.Domain.Doctor", null)
                        .WithMany()
                        .HasForeignKey("DoctorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseTask.Core.Domain.MedicalVisit", null)
                        .WithMany()
                        .HasForeignKey("VisitIDMedicineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Doctor", b =>
                {
                    b.Navigation("DepartmentID");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.MedicalVisit", b =>
                {
                    b.Navigation("PatientID");
                });

            modelBuilder.Entity("DatabaseTask.Core.Domain.Medicine", b =>
                {
                    b.Navigation("DoctorID");
                });
#pragma warning restore 612, 618
        }
    }
}
